'''
EXAMPLE AUTO QUOTER

Do not edit this file directly. Instead, copy it somewhere else in your workspace.
These are simple bots that illustrate the Optibook API and some simple trading concepts. These bots will not make a profit.

This is an example bot that quotes the instrument C2_GREEN_ENERGY_ETF.
Quoting an instrument means sending both bids and asks at the same time and making these publicly visible in the order book,
so that other participants can trade with you. The logic of this bot is very simple. It looks at the current order book and tries to 
improve the price by 0.10 cents if possible. If the best bid is 90 and the best ask is 91, it will try to send a bid=90.10 and ask=90.90.
'''
import logging
import time
import sys
from typing import List
from optibook import common_types as t
from optibook import ORDER_TYPE_IOC, ORDER_TYPE_LIMIT, SIDE_ASK, SIDE_BID
from optibook.exchange_responses import InsertOrderResponse
from optibook.synchronous_client import Exchange
from functools import reduce  
logging.getLogger('client').setLevel('ERROR')
logger = logging.getLogger(__name__)
LOG = True

instrument_id = 'C2_GREEN_ENERGY_ETF'
instruments = {"solar":'C2_SOLAR_CO', "wind":'C2_WIND_LTD',"basket":'C2_GREEN_ENERGY_ETF'}

e=Exchange()
a=e.connect()

def get_spread(pb):
    try:
        return pb.asks[0].price - pb.bids[0].price
    except IndexError:
        return None
    
    
def get_basket_stocks_spread(e: Exchange):
    basket=e.get_last_price_book('C2_GREEN_ENERGY_ETF').asks[0].price
    solar=e.get_last_price_book('C2_SOLAR_CO').bids[0].price
    wind=e.get_last_price_book('C2_WIND_LTD').bids[0].price
    return (basket-(solar+wind))


def buy_high(e,instrument_id,vol,pb):
    if not pb.asks:
        return 
    spread=0.1
    price=pb.asks[0].price+spread
    print(f"buy high{instrument_id}", price)
    try:
        result=e.insert_order(instrument_id,price=price,volume=vol,side='bid',order_type='ioc')
        return result
    except :
        pass

def sell_low(e,instrument_id,vol,pb):
    if not pb.bids:
        return 
    spread=0.1
    price = pb.bids[0].price-spread
    print(f"sell low {instrument_id}", price)
    result=e.insert_order(instrument_id,price=price,volume=vol,side='ask',order_type='ioc')
    return result 

def spread_trade(e:Exchange):
    LOG=True 
    positions=e.get_positions()
    global liquidate_mode
    if positions['C2_GREEN_ENERGY_ETF']<=0:
        low_limit=0
        high_limit=0.7
    else:
        low_limit=-0.7
        high_limit=0
    d=[i>425 or i<-425 for i in positions.values()]
    if any(d):
        liquidate_mode=True
    while liquidate_mode:
        time.sleep(0.08)
        if LOG:print("liquidation mode")
        positions=e.get_positions()
        d=[abs(i)<400 for i in positions.values()]
        if any(d):
            liquidate_mode= False
            break
        liquidate(e)
    
    vol=5
    pb_basket=e.get_last_price_book('C2_GREEN_ENERGY_ETF')
    pb_wind=e.get_last_price_book('C2_WIND_LTD')
    pb_solar=e.get_last_price_book('C2_SOLAR_CO')
    
    basket_spread=get_spread(pb_basket)
    wind_spread=get_spread(pb_wind)
    solar_spread=get_spread(pb_solar)
    
    if basket_spread and wind_spread and solar_spread:
        basket=pb_basket.asks[0].price
        wind=pb_wind.bids[0].price
        solar=pb_solar.bids[0].price
        spread=(basket-(wind+solar))
        safety_spread=3
        
        if spread <= low_limit and basket_spread < safety_spread and wind_spread < safety_spread and solar_spread < safety_spread:
            print("spread: ",basket_spread)
            if pb_basket.asks and pb_basket.bids:
                buy_high(e,'C2_GREEN_ENERGY_ETF',vol,pb_basket)
                sell_low(e,'C2_WIND_LTD',vol,pb_wind)
                sell_low(e,'C2_SOLAR_CO',vol,pb_solar)
            return "Basket Underpriced"
        elif spread >=high_limit and basket_spread < safety_spread and wind_spread < safety_spread and solar_spread < safety_spread:
            print("spread : ",basket_spread)
            if pb_basket.asks and pb_basket.bids:
                sell_low(e,'C2_GREEN_ENERGY_ETF',vol,pb_basket)
                buy_high(e,'C2_WIND_LTD',vol,pb_wind)
                buy_high(e,'C2_SOLAR_CO',vol,pb_solar)
            return "basket Overpriced"
            
        else:
            try:
                print(get_basket_stocks_spread(e))
            except:
                pass
            return "Nothing Hapenning"
    else:
        return "empty pb list"


def liquidate(e:Exchange):
    vol=1
    safety_spread=0.5
    psotions=e.get_positions()
    pb_basket=e.get_last_price_book('C2_GREEN_ENERGY_ETF')
    pb_wind=e.get_last_price_book('C2_WIND_LTD')
    pb_solar=e.get_last_price_book('C2_SOLAR_CO')
    
    basket_spread=get_spread(pb_basket)
    wind_spread=get_spread(pb_wind)
    solar_spread=get_spread(pb_solar)
    
    if basket_spread and wind_spread and solar_spread:
        spread=get_diffrence_to_buy(e)
        print(spread)
        print(positions['C2_GREEN_ENERGY_ETF'])
        if positions['C2_GREEN_ENERGY_ETF']<=0 and spread<=0:
            if pb_basket.asks and pb_basket.bids and basket_spread < safety_spread and pb_basket.bids[0].price < 250 and wind_spread < safety_spread and solar_spread < safety_spread :
                
                buy_high(e,'C2_GREEN_ENERGY_ETF',vol,pb_basket)
                sell_low(e,'C2_WIND_LTD',vol,pb_wind)
                sell_low(e,'C2_SOLAR_CO',vol,pb_solar)
                return "Basket Underpriced"
        elif positions['C2_GREEN_ENERGY_ETF']>=0 and spread>=0:
            if pb_basket.asks and pb_basket.bids and basket_spread < safety_spread and pb_basket.bids[0].price < 250 and wind_spread < safety_spread and solar_spread < safety_spread :
                sell_low(e,'C2_GREEN_ENERGY_ETF',vol,pb_basket)
                buy_high(e,'C2_WIND_LTD',vol,pb_wind)
                buy_high(e,'C2_SOLAR_CO',vol,pb_solar)
                return "basket overpriced"
    else:
        return "empty pb list"


    
def balance(e:Exchange):
    vol=1
    safety_spread=0.5
    positions=e.get_positions()
    pb_wind=e.get_last_price_book('C2_WIND_LTD')
    
    while positions['C2_SOLAR_CO'] < positions['C2_GREEN_ENERGY_ETF']:
        time.sleep(0.08)
        pb_solar=e.get_last_price_book('C2_SOLAR_CO')
        solar_spread=get_spread(pb_solar)
        if solar_spread and solar_spread < safety_spread:
            buy_high(e,'C2_SOLAR_CO',vol,pb_solar)
        positions=e.get_positions()
    
    while positions['C2_SOLAR_CO'] > positions['C2_GREEN_ENERGY_ETF']: 
        time.sleep(0.08)
        pb_solar=e.get_last_price_book('C2_SOLAR_CO')
        solar_spread=get_spread(pb_solar)
        if solar_spread and solar_spread < safety_spread:
            sell_low(e,'C2_SOLAR_CO',vol,pb_solar)
        positions=e.get_positions()
    
    while positions['C2_WIND_LTD'] < positions['C2_GREEN_ENERGY_ETF']:
        time.sleep(0.08)
        pb_wind=e.get_last_price_book('C2_WIND_LTD')
        wind_spread=get_spread(pb_wind)
        if wind_spread and wind_spread < safety_spread:
            buy_high(e,'C2_WIND_LTD',vol,pb_wind)
        positions=e.get_positions()
    
    while positions['C2_WIND_LTD'] > positions['C2_GREEN_ENERGY_ETF']:
        time.sleep(0.08)
        pb_wind=e.get_last_price_book('C2_WIND_LTD')
        wind_spread=get_spread(pb_wind)
        if wind_spread and wind_spread < safety_spread:
            sell_low(e,'C2_WIND_LTD',vol,pb_wind)
        positions=e.get_positions()
    return "balanced"


def market_making(e:Exchange,d):
    e.delete_orders("C2_GREEN_ENERGY_ETF")
    pb=e.get_last_price_book('C2_GREEN_ENERGY_ETF')
    
    vol=1
    sell=-1
    buy=-1
    
    if not pb.asks and pb.bids:
        sell=(pb.bids[0].price+d*0.2+0.5)
        buy=(pb.bids[0].price+0.1-(d*0.2))
    elif not pb.bids and pb.asks:
        sell=(pb.bids[0].price-0.1+0.2*d)
        buy=(pb.bids[0].price-0.5-0.2*d)
    else:
        sell=(pb.bids[0].price+0.2+d*0.2)
        buy=(pb.bids[0].price-0.2-d*0.2)
    if sell!=-1 and buy !=-1:
        print("entered")
        sell_order=e.insert_order('C2_GREEN_ENERGY_ETF',price=sell,volume=vol,side='ask',order_type='limit')
        time.sleep(0.04)
        buy_order=e.insert_order('C2_GREEN_ENERGY_ETF',price=buy,volume=vol,side='bid',order_type='limit')
        if LOG: 
            print(f"Basket selling {sell_order} - buying {buy_order}")
                  

def get_market_price(e:Exchange,instrument_id) -> int :
      tts=e.get_trade_tick_history(instrument_id)
      if len(tts) !=0:
          return tts[-1].price
      else:
          return None
                  

def get_diffrence_to_buy(e:Exchange):
    tb= get_market_price(e,"C2_GREEN_ENERGY_ETF")
    wind= get_market_price(e,"C2_WIND_LTD")
    solar= get_market_price(e,"C2_SOLAR_CO")  
    
    while not tb or not wind or not solar:
        tb=get_market_price(e,"C2_GREEN_ENERGY_ETF")
        wind=get_market_price(e,"C2_WIND_LTD")
        solar=get_market_price(e,"C2_SOLAR_CO")  
    combo= wind+solar
    print("tb: ",tb)
    print("combo: ",combo)
    return tb-combo

                  
                  
def get_price_book(e:Exchange):
    pb_basket=e.get_last_price_book('C2_GREEN_ENERGY_ETF')
    pb_wind=e.get_last_price_book('C2_WIND_LTD')
    pb_solar=e.get_last_price_book('C2_SOLAR_CO')
    return  pb_basket,pb_wind,pb_solar             
                  
def sell_market_price(e:Exchange,instrument_id,vol,order_type="ioc"):
    market_price=get_market_price(e,instrument_id)
    pb=e.get_last_price_book(instrument_id)
    if pb.bids:
        market_price=pb.bids[0].price
    e.insert_order(instrument_id,price=market_price,volume=vol,side="bid",order_type=order_type)
                  
                  
                  
def buy_market_price(e:Exchange,instrument_id,vol,order_type="ioc"):
    market_price=get_market_price(e,instrument_id)
    pb=e.get_last_price_book(instrument_id)
    if pb.asks:
       market_price=pb.asks[0].price
    e.insert_order(instrument_id,price=market_price,volume=vol,side="bid",order_type=order_type)
    
def delta_neutral(e:Exchange,depth):
    market_making(e,depth)
    curr_trades=e.poll_new_trades("C2_GREEN_ENERGY_ETF")
    pb_basket,pb_wind,pb_solar=get_price_book(e)
    for trade in curr_trades:
        if trade.side=="bid":
            print("match bid")
            sell_market_price(e,"C2_SOLAR_CO",trade.volume)
            time.sleep(0.04)
            sell_market_price(e,"C2_WIND_LTD",trade.volume)
            time.sleep(0.04)
        if trade.side=="ask":
            print("match ask")
            buy_market_price(e,"C2_SOLAR_CO",trade.volume)
            time.sleep(0.04)
            buy_market_price(e,"C2_WIND_LTD",trade.volume)
            time.sleep(0.04)
            
def hack_out(e):
    for s,p in e.get_positions().items():
        if p > 0:
            e.insert_order(s,price=1,volume=p,side="ask",order_type="limit")
        elif p<0:
            e.insert_order(s,price=10000,volume=p,side="bid",order_type="limit")
    print(e.get_positions())
    
    
def check_connection(e):
    if e.is_connected():
        return 
    e.connect()

liquidate_mode=False

def main():
    LOG=True
    while True:
        check_connection(e)
        print(delta_neutral(e,1))
        print(market_making(e,1))
        print(spread_trade(e))
        print(balance(e))
        time.sleep(0.08)
        

main()